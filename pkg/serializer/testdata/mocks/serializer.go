// Code generated by MockGen. DO NOT EDIT.
// Source: serializer.go

// Package serializer is a generated GoMock package.
package serializer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	serializer "github.com/tagpro/zd-search-cli/pkg/serializer"
)

// MockSerializer is a mock of Serializer interface.
type MockSerializer struct {
	ctrl     *gomock.Controller
	recorder *MockSerializerMockRecorder
}

// MockSerializerMockRecorder is the mock recorder for MockSerializer.
type MockSerializerMockRecorder struct {
	mock *MockSerializer
}

// NewMockSerializer creates a new mock instance.
func NewMockSerializer(ctrl *gomock.Controller) *MockSerializer {
	mock := &MockSerializer{ctrl: ctrl}
	mock.recorder = &MockSerializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSerializer) EXPECT() *MockSerializerMockRecorder {
	return m.recorder
}

// SearchEntity mocks base method.
func (m *MockSerializer) SearchEntity(criteria serializer.SearchCriteria) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEntity", criteria)
	ret0, _ := ret[0].(error)
	return ret0
}

// SearchEntity indicates an expected call of SearchEntity.
func (mr *MockSerializerMockRecorder) SearchEntity(criteria interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEntity", reflect.TypeOf((*MockSerializer)(nil).SearchEntity), criteria)
}
