// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	organistations "github.com/tagpro/zd-search-cli/pkg/store/organistations"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetOrganisations mocks base method.
func (m *MockCache) GetOrganisations(key, input string) (organistations.Organisations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganisations", key, input)
	ret0, _ := ret[0].(organistations.Organisations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganisations indicates an expected call of GetOrganisations.
func (mr *MockCacheMockRecorder) GetOrganisations(key, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganisations", reflect.TypeOf((*MockCache)(nil).GetOrganisations), key, input)
}

// Optimise mocks base method.
func (m *MockCache) Optimise() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Optimise")
	ret0, _ := ret[0].(error)
	return ret0
}

// Optimise indicates an expected call of Optimise.
func (mr *MockCacheMockRecorder) Optimise() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Optimise", reflect.TypeOf((*MockCache)(nil).Optimise))
}
